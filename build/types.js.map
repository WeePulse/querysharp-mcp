{"version":3,"file":"types.js","sourceRoot":"/src/","sources":["types.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AAExB,oBAAoB;AACpB,MAAM,CAAN,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,+CAA+B,CAAA;IAC/B,+CAA+B,CAAA;AACjC,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB;AAED,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,yCAAqB,CAAA;IACrB,2CAAuB,CAAA;IACvB,+CAA2B,CAAA;AAC7B,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAED,oCAAoC;AACpC,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,CAAC,MAAM,CAAC;IACnD,KAAK,EAAE,CAAC,CAAC,KAAK,CACZ,CAAC,CAAC,MAAM,CAAC;QACP,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;QAChB,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE;QACrB,YAAY,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC;QAClC,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE;QAC1B,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;QAClC,iBAAiB,EAAE,CAAC;aACjB,MAAM,CAAC;YACN,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE;YACrB,eAAe,EAAE,CAAC,CAAC,MAAM,EAAE;YAC3B,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE;SACxB,CAAC;aACD,QAAQ,EAAE;QACb,iBAAiB,EAAE,CAAC;aACjB,MAAM,CAAC;YACN,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE;YACzB,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE;SACvB,CAAC;aACD,QAAQ,EAAE;KACd,CAAC,CACH;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,CAAC,KAAK,CAC5C,CAAC,CAAC,MAAM,CAAC;IACP,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;IAChB,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;IAChB,UAAU,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;CAChC,CAAC,CACH,CAAC","sourcesContent":["import { z } from 'zod';\n\n// Enums for the API\nexport enum QueryFixType {\n  QUERY_REWRITE = 'query_rewrite',\n  INDEX_MISSING = 'index_missing',\n}\n\nexport enum QueryFixSeverity {\n  CRITICAL = 'critical',\n  IMPORTANT = 'important',\n  TO_CONSIDER = 'to_consider',\n}\n\n// Zod schemas based on the API DTOs\nexport const getDatabaseFixesDtoOutSchema = z.object({\n  fixes: z.array(\n    z.object({\n      uuid: z.string(),\n      createdAt: z.string(),\n      queryFixType: z.enum(QueryFixType),\n      fixDescription: z.string(),\n      severity: z.enum(QueryFixSeverity),\n      guessMissingIndex: z\n        .object({\n          indexName: z.string(),\n          indexDefinition: z.string(),\n          qsTableName: z.string(),\n        })\n        .nullable(),\n      guessQueryRewrite: z\n        .object({\n          originalQuery: z.string(),\n          fixedQuery: z.string(),\n        })\n        .nullable(),\n    }),\n  ),\n});\n\nexport const getProjectsDtoOutSchema = z.array(\n  z.object({\n    uuid: z.string(),\n    name: z.string(),\n    tableNames: z.array(z.string()),\n  }),\n);\n\nexport type GetDatabaseFixesDtoOut = z.infer<\n  typeof getDatabaseFixesDtoOutSchema\n>;\nexport type GetProjectsDtoOut = z.infer<typeof getProjectsDtoOutSchema>;\nexport type Project = GetProjectsDtoOut[0];\nexport type DatabaseFix = GetDatabaseFixesDtoOut['fixes'][0];\n\nexport interface QuerysharpConfig {\n  apiKey: string;\n}\n"]}