{"version":3,"file":"mcp-server.js","sourceRoot":"/src/","sources":["mcp-server.ts"],"names":[],"mappings":"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","sourcesContent":["import { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport { QuerysharpApiClient } from './api-client.js';\nimport { QuerysharpConfig, QueryFixSeverity, QueryFixType } from './types.js';\n\nexport class QuerysharpMcpServer {\n  private server: Server;\n  private apiClient: QuerysharpApiClient;\n\n  constructor(config: QuerysharpConfig) {\n    this.server = new Server(\n      {\n        name: 'querysharp-mcp',\n        version: '1.0.0',\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      },\n    );\n\n    this.apiClient = new QuerysharpApiClient(config);\n    this.setupToolHandlers();\n  }\n\n  private setupToolHandlers() {\n    // List available tools\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => {\n      return {\n        tools: [\n          {\n            name: 'get_projects',\n            description:\n              'Get all available projects for which there are database improvements fixes available',\n            inputSchema: {\n              type: 'object',\n              properties: {},\n              required: [],\n            },\n          },\n          {\n            name: 'get_database_fixes',\n            description:\n              'Get available database improvement / performance fixes for a specific project',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                projectUuid: {\n                  type: 'string',\n                  description: 'The UUID of the project to get fixes for',\n                },\n              },\n              required: ['projectUuid'],\n            },\n          },\n        ],\n      };\n    });\n\n    // Handle tool calls\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      try {\n        switch (request.params.name) {\n          case 'get_projects': {\n            const projects = await this.apiClient.getProjects();\n\n            return {\n              content: [\n                {\n                  type: 'text',\n                  text: `Found ${projects.length} Querysharp projects:\\n\\n${projects\n                    .map(\n                      (project, index) =>\n                        `${index + 1}. **${project.name}** (UUID: ${project.uuid})\\n   Tables: ${project.tableNames.join(', ')}`,\n                    )\n                    .join('\\n\\n')}`,\n                },\n              ],\n            };\n          }\n\n          case 'get_database_fixes': {\n            const projectUuid = request.params.arguments?.projectUuid as string;\n\n            if (!projectUuid) {\n              throw new Error('projectUuid is required');\n            }\n\n            const fixes = await this.apiClient.getDatabaseFixes(projectUuid);\n\n            if (fixes.fixes.length === 0) {\n              return {\n                content: [\n                  {\n                    type: 'text',\n                    text: 'No database performance fixes available for this project. Your database is performing well!',\n                  },\n                ],\n              };\n            }\n\n            const fixesText = fixes.fixes\n              .map((fix, index) => {\n                let fixDetails = '';\n\n                if (\n                  fix.queryFixType === QueryFixType.INDEX_MISSING &&\n                  fix.guessMissingIndex\n                ) {\n                  fixDetails = `**Missing Index Fix:**\n- Table: ${fix.guessMissingIndex.qsTableName}\n- Suggested Index: ${fix.guessMissingIndex.indexName}\n- SQL: \\`${fix.guessMissingIndex.indexDefinition}\\``;\n                } else if (\n                  fix.queryFixType === QueryFixType.QUERY_REWRITE &&\n                  fix.guessQueryRewrite\n                ) {\n                  fixDetails = `**Query Rewrite Fix:**\n- Original Query: \\`${fix.guessQueryRewrite.originalQuery}\\`\n- Optimized Query: \\`${fix.guessQueryRewrite.fixedQuery}\\``;\n                }\n\n                return `## Fix ${index + 1}: ${fix.fixDescription}\n\n**Severity:** ${this.getSeverityEmoji(fix.severity)} ${fix.severity}\n**Type:** ${fix.queryFixType}\n**Created:** ${new Date(fix.createdAt).toLocaleDateString()}\n\n${fixDetails}`;\n              })\n              .join('\\n\\n---\\n\\n');\n\n            return {\n              content: [\n                {\n                  type: 'text',\n                  text: `Found ${fixes.fixes.length} database performance fixes:\\n\\n${fixesText}`,\n                },\n              ],\n            };\n          }\n\n          default:\n            throw new Error(`Unknown tool: ${request.params.name}`);\n        }\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : 'Unknown error occurred';\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Error: ${errorMessage}`,\n            },\n          ],\n          isError: true,\n        };\n      }\n    });\n  }\n\n  private getSeverityEmoji(severity: QueryFixSeverity): string {\n    switch (severity) {\n      case QueryFixSeverity.TO_CONSIDER:\n        return 'ðŸŸ¢';\n      case QueryFixSeverity.IMPORTANT:\n        return 'ðŸŸ¡';\n      case QueryFixSeverity.CRITICAL:\n        return 'ðŸ”´';\n      default:\n        return 'âšª';\n    }\n  }\n\n  async start() {\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error('Querysharp MCP server started');\n  }\n}\n"]}