{"version":3,"file":"api-client.js","sourceRoot":"/src/","sources":["api-client.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,4BAA4B,EAC5B,uBAAuB,GAExB,MAAM,YAAY,CAAC;AAEpB,MAAM,OAAO,mBAAmB;IACb,OAAO,GAAG,4BAA4B,CAAC;IAChD,MAAM,CAAS;IAEvB,YAAY,MAAwB;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;IAC9B,CAAC;IAEO,KAAK,CAAC,WAAW,CAAI,QAAgB;QAC3C,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ,EAAE,CAAC;QAEzC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE;gBAChC,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE;oBACP,WAAW,EAAE,IAAI,CAAC,MAAM;oBACxB,cAAc,EAAE,kBAAkB;iBACnC;aACF,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACjB,MAAM,IAAI,KAAK,CACb,uBAAuB,QAAQ,CAAC,MAAM,cAAc,QAAQ,CAAC,UAAU,EAAE,CAC1E,CAAC;YACJ,CAAC;YAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnC,OAAO,IAAS,CAAC;QACnB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;gBAC3B,MAAM,IAAI,KAAK,CAAC,kBAAkB,QAAQ,KAAK,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAClE,CAAC;YACD,MAAM,IAAI,KAAK,CAAC,kBAAkB,QAAQ,iBAAiB,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CAAoB,mBAAmB,CAAC,CAAC;QAE5E,yCAAyC;QACzC,IAAI,CAAC;YACH,OAAO,uBAAuB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,uDAAuD,KAAK,EAAE,CAC/D,CAAC;QACJ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,WAAmB;QACxC,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,WAAW,CACjC,iBAAiB,WAAW,qBAAqB,CAClD,CAAC;QAEF,yCAAyC;QACzC,IAAI,CAAC;YACH,OAAO,4BAA4B,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,6DAA6D,KAAK,EAAE,CACrE,CAAC;QACJ,CAAC;IACH,CAAC;CACF","sourcesContent":["import {\n  GetDatabaseFixesDtoOut,\n  GetProjectsDtoOut,\n  getDatabaseFixesDtoOutSchema,\n  getProjectsDtoOutSchema,\n  QuerysharpConfig,\n} from './types.js';\n\nexport class QuerysharpApiClient {\n  private readonly baseUrl = 'https://api.querysharp.com';\n  private apiKey: string;\n\n  constructor(config: QuerysharpConfig) {\n    this.apiKey = config.apiKey;\n  }\n\n  private async makeRequest<T>(endpoint: string): Promise<T> {\n    const url = `${this.baseUrl}${endpoint}`;\n\n    try {\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'x-api-key': this.apiKey,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\n          `HTTP error! status: ${response.status}, message: ${response.statusText}`,\n        );\n      }\n\n      const data = await response.json();\n      return data as T;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to call ${endpoint}: ${error.message}`);\n      }\n      throw new Error(`Failed to call ${endpoint}: Unknown error`);\n    }\n  }\n\n  async getProjects(): Promise<GetProjectsDtoOut> {\n    const data = await this.makeRequest<GetProjectsDtoOut>('/mcp/get-projects');\n\n    // Validate the response using Zod schema\n    try {\n      return getProjectsDtoOutSchema.parse(data);\n    } catch (error) {\n      throw new Error(\n        `Invalid response format from get-projects endpoint: ${error}`,\n      );\n    }\n  }\n\n  async getDatabaseFixes(projectUuid: string): Promise<GetDatabaseFixesDtoOut> {\n    const data = await this.makeRequest<GetDatabaseFixesDtoOut>(\n      `/mcp/database/${projectUuid}/get-database-fixes`,\n    );\n\n    // Validate the response using Zod schema\n    try {\n      return getDatabaseFixesDtoOutSchema.parse(data);\n    } catch (error) {\n      throw new Error(\n        `Invalid response format from get-database-fixes endpoint: ${error}`,\n      );\n    }\n  }\n}\n"]}