name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.1, 1.1.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string
        default: ''

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: |
        npm run lint
        npm test
        npm run build
        
    - name: Update version in package.json
      run: npm version ${{ github.event.inputs.version }} --no-git-tag-version
      
    - name: Update CHANGELOG
      run: |
        DATE=$(date +%Y-%m-%d)
        sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${{ github.event.inputs.version }}] - $DATE/" CHANGELOG.md || echo "CHANGELOG.md not found, skipping..."
        
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add package.json package-lock.json CHANGELOG.md
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}" || echo "No changes to commit"
        
    - name: Create and push tag
      run: |
        git tag v${{ github.event.inputs.version }}
        git push origin main
        git push origin v${{ github.event.inputs.version }}
        
    - name: Generate release notes
      id: release_notes
      run: |
        if [ -n "${{ github.event.inputs.release_notes }}" ]; then
          echo "RELEASE_NOTES=${{ github.event.inputs.release_notes }}" >> $GITHUB_OUTPUT
        else
          # Generate basic release notes from commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            NOTES=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges)
          else
            NOTES="Initial release"
          fi
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false 